#! /usr/bin/env elixir
# for Elixir 1.12.0-otp-24, erlang 24.0.1

Mix.install([{:httpoison, "~> 1.8"}, {:floki, "~> 0.31"}])

{:ok, response} = HTTPoison.get("https://www.mbta.com/")
200 = response.status_code
{:ok, tree} = Floki.parse_document(response.body)

# TODO: Instead of using the <link> and <script> tags from MBTA.com,
# extract the relevant CSS and JS
scripts_tags = Floki.find(tree, "[data-turbolinks-track=\"reload\"]")

process_link = fn link ->
  case Floki.attribute(link, "href") do
    ["/" <> _page] ->
      IO.puts(" * updating relative link")
      Floki.attr([link], "a", "href", fn href -> "https://www.mbta.com" <> href end)

    ["https://" <> _url] ->
      IO.puts(" * modifying https:// link")
      Floki.attr([link], "a", "rel", fn _ -> "noopener" end)

    ["http://" <> _url] ->
      IO.puts(" * modifying http:// link")
      Floki.attr([link], "a", "rel", fn _ -> "noopener" end)

    _ ->
      [link]
  end
  |> Floki.attr("a", "target", fn _ -> "_blank" end)
  |> List.first()
end

update_links = fn tree ->
  IO.puts("#{IO.ANSI.blue()}traversing all links")

  Floki.traverse_and_update(tree, fn
    {"a", _attrs, _children} = link -> process_link.(link)
    other -> other
  end)
end

remove_language_selector = fn html_tree ->
  IO.puts("#{IO.ANSI.magenta()}removing Google Translate stuff")

  Floki.find_and_update(html_tree, "#custom-language-selector", fn _ -> :delete end)
  |> Floki.find_and_update("#google_translate_element", fn _ -> :delete end)
  |> Floki.find_and_update("#custom-language-menu-mobile", fn _ -> :delete end)
  |> Floki.find_and_update("script", fn _ -> :delete end)
end

html =
  tree
  |> Floki.find(".header, .m-footer")
  |> update_links.()
  |> remove_language_selector.()

IO.puts("#{IO.ANSI.yellow()}writing HTML to generated/chrome.html")

new_tree =
  [
    {"html", [{"lang", "en"}],
     [
       {"head", [], scripts_tags},
       {"body", [],
        [
          {"div", [{"class", "body-wrapper"}, {"id", "body-wrapper"}], html}
        ]}
     ]}
  ]
  |> Floki.raw_html(encode: true, pretty: true)

:ok = File.write("generated/chrome.html", new_tree)
IO.puts("#{IO.ANSI.green()}done.")
